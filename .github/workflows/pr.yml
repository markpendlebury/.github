name: PR Workflow

on:
  workflow_call:
    inputs:
      env_name:
        required: true
        type: string
      protected_env_name:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      tf_working_dir:
        required: true
        type: string
      tf_version:
        required: false
        default: 1.5.6
        type: string
      run_lambda_steps:
        required: false
        default: true
        type: boolean

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  prerequisites:
    name: "Prerequisites"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env_name }}
    outputs:
      lambdas_changed: ${{ steps.prerequisites.outputs.lambdas_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Prerequisites
        id: prerequisites
        uses: markpendlebury/.github/.github/actions/prerequisites@main
  lambda_tests_and_package:
    name: "Run Lambda Tests and Package"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env_name }}
    needs: prerequisites
    strategy:
      matrix:
        python-version: [ "3.10" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lambda Tests and Package
        if: inputs.run_lambda_steps == true
        uses: markpendlebury/.github/.github/actions/lambda_tests_and_package@main
        with:
          lambda_names: "${{ needs.prerequisites.outputs.lambdas_changed  }}"
          python_version_matrix: "${{ matrix.python-version  }}"
          aws_role: ${{ vars.AWS_OIDC_ROLE }}
          aws_account_id: ${{ vars.ACCOUNT_ID }}
    
  terraform_plan:
    name: "Terraform Plan ${{ inputs.env_name }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env_name }}
    concurrency:
      group: ${{ inputs.env_name }}
      cancel-in-progress: false
    env:
      TF_VAR_org_environment: ${{ inputs.env_name }}
    needs: 
      - prerequisites
      - lambda_tests_and_package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform
        uses: markpendlebury/.github/.github/actions/terraform_run@main
        with:
          aws_role: ${{ vars.AWS_OIDC_ROLE }}
          terraform_action: 'plan'
          terraform_version: ${{ inputs.tf_version }}
          tfstate_bucket: ${{ vars.BUCKET_NAME }}
          tf_working_dir: ${{ inputs.tf_working_dir }}
          aws_region: ${{ inputs.aws_region }}
  
  terraform_apply:
    name: "Terraform Apply ${{ inputs.env_name }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env_name }}
    concurrency:
      group: ${{ inputs.env_name }}
      cancel-in-progress: false
    env:
      TF_VAR_org_environment: ${{ inputs.env_name }}
    needs: 
      - prerequisites
      - terraform_plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform
        uses: markpendlebury/.github/.github/actions/terraform_run@main
        with:
          aws_role: ${{ vars.AWS_OIDC_ROLE }}
          terraform_action: 'apply'
          terraform_version: ${{ inputs.tf_version }}
          tfstate_bucket: ${{ vars.BUCKET_NAME }}
          tf_working_dir: ${{ inputs.tf_working_dir }}
          aws_region: ${{ inputs.aws_region }}
  integration_tests:
    name: "Integraiton Tests ${{ inputs.env_name }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env_name }}
    concurrency:
      group: ${{ inputs.env_name }}
      cancel-in-progress: false
    env:
      TF_VAR_org_environment: ${{ inputs.env_name }}
    needs: 
      - prerequisites
      - terraform_apply
    strategy:
      matrix:
        python-version: [ "3.10" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Integration Tests
        uses: markpendlebury/.github/.github/actions/pytest@main
        with:
          working_dir: integration_tests
          python_version_matrix: "${{ matrix.python-version  }}"

  wait_revert_command:
    name: "Manual testing"
    timeout-minutes: 180 #3 hours
    runs-on: ubuntu-latest
    environment: ${{ inputs.protected_env_name }}
    needs:
      - integration_tests
    steps:
      - name: Revert Dev Approved
        run: |
          echo "Manual testing completed. Proceed to revert changes in Dev environment"

  lambda_tests_and_package_main:
    name: "Run Lambda Tests and Package from origin/main"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ inputs.env_name }}
      cancel-in-progress: false
    needs:
      - prerequisites
      - wait_revert_command
    strategy:
      matrix:
        python-version: [ "3.10" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Run Lambda Tests and Package
        if: inputs.run_lambda_steps == true
        uses: markpendlebury/.github/.github/actions/lambda_tests_and_package@main
        with:
          lambda_names: "${{ needs.prerequisites.outputs.lambdas_changed  }}"
          python_version_matrix: "${{ matrix.python-version  }}"
          aws_role: ${{ vars.AWS_OIDC_ROLE }}
          aws_account_id: ${{ vars.ACCOUNT_ID }}

  terraform_apply_main:
    name: "Terraform Apply from origin/main"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env_name }}
    concurrency:
      group: ${{ inputs.env_name }}
      cancel-in-progress: false
    env:
      TF_VAR_org_environment: ${{ inputs.env_name }}
    if: ${{ always() }}
    needs: 
      - prerequisites
      - wait_revert_command
      - lambda_tests_and_package_main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Run Terraform
        uses: markpendlebury/.github/.github/actions/terraform_run@main
        with:
          aws_role: ${{ vars.AWS_OIDC_ROLE }}
          terraform_action: 'apply'
          terraform_version: ${{ inputs.tf_version }}
          tfstate_bucket: ${{ vars.BUCKET_NAME }}
          tf_working_dir: ${{ inputs.tf_working_dir }}
          aws_region: ${{ inputs.aws_region }}
